// Code generated by mockery v2.46.2. DO NOT EDIT.

package chain

import mock "github.com/stretchr/testify/mock"

// mockLink is an autogenerated mock type for the link type
type mockLink[T any] struct {
	mock.Mock
}

// Apply provides a mock function with given fields: _a0
func (_m *mockLink[T]) Apply(_a0 T) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(T) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Run provides a mock function with given fields: _a0
func (_m *mockLink[T]) Run(_a0 T) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(T) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// setNext provides a mock function with given fields: _a0
func (_m *mockLink[T]) setNext(_a0 link[T]) {
	_m.Called(_a0)
}

// newMockLink creates a new instance of mockLink. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLink[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLink[T] {
	mock := &mockLink[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

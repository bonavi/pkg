// Code generated by mockery v2.46.2. DO NOT EDIT.

package geolite

import (
	geoip2 "github.com/oschwald/geoip2-golang"
	mock "github.com/stretchr/testify/mock"

	net "net"
)

// MockGeoLite is an autogenerated mock type for the GeoLite type
type MockGeoLite struct {
	mock.Mock
}

// City provides a mock function with given fields: ip
func (_m *MockGeoLite) City(ip net.IP) (*geoip2.City, error) {
	ret := _m.Called(ip)

	if len(ret) == 0 {
		panic("no return value specified for City")
	}

	var r0 *geoip2.City
	var r1 error
	if rf, ok := ret.Get(0).(func(net.IP) (*geoip2.City, error)); ok {
		return rf(ip)
	}
	if rf, ok := ret.Get(0).(func(net.IP) *geoip2.City); ok {
		r0 = rf(ip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*geoip2.City)
		}
	}

	if rf, ok := ret.Get(1).(func(net.IP) error); ok {
		r1 = rf(ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *MockGeoLite) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockGeoLite creates a new instance of MockGeoLite. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGeoLite(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGeoLite {
	mock := &MockGeoLite{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
